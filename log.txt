
n = 15000 elastic_constants_time
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 285.971 s (9.17% GC) to evaluate,
 with a memory estimate of 148.79 GiB, over 1826717930 allocations.

BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 304.565 s (9.44% GC) to evaluate,
 with a memory estimate of 148.79 GiB, over 1826708337 allocations.

after @view change
no increase in speed, but memory estimate got reduced
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 294.183 s (8.90% GC) to evaluate,
 with a memory estimate of 143.67 GiB, over 1826632137 allocations.

after inv() call moved outside of for loop
almost cut in half in time and memory estimate reduced
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 170.339 s (16.79% GC) to evaluate,
 with a memory estimate of 128.38 GiB, over 1598677135 allocations.

after StaticArrays change
speed cut more and memory estimate further reduced
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 47.524 s (15.99% GC) to evaluate,
 with a memory estimate of 40.05 GiB, over 116729639 allocations.

full change of StaticArrays
forgot to move I3 call into for-loop
allocations further reduced, speed is still about the same
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 41.113 s (15.08% GC) to evaluate,
 with a memory estimate of 36.65 GiB, over 2752139 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 46.647 s (16.02% GC) to evaluate,
 with a memory estimate of 36.65 GiB, over 2752137 allocations.

-- not related to code base, but related to usage for el constant running average
moved steps outside of for loop, saved into arrays and calculated constants using data
Mac i9
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 25.799 s (16.22% GC) to evaluate,
 with a memory estimate of 24.50 GiB, over 1898383 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 29.764 s (16.98% GC) to evaluate,
 with a memory estimate of 24.50 GiB, over 1898379 allocations.

Thinkpad i3
n = 15000
-- single thread
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 8.133 s (11.58% GC) to evaluate,
 with a memory estimate of 23.88 GiB, over 1931613 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 8.193 s (11.94% GC) to evaluate,
 with a memory estimate of 23.88 GiB, over 1931613 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 11.399 s (12.71% GC) to evaluate,
 with a memory estimate of 23.88 GiB, over 1931613 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 7.090 s (15.30% GC) to evaluate,
 with a memory estimate of 23.88 GiB, over 1931638 allocations.

-- multithreaded
nt = 4

n = 45000
-- single thead nt = 1
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 90.452 s (11.77% GC) to evaluate,
 with a memory estimate of 212.37 GiB, over 4961613 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 78.925 s (10.76% GC) to evaluate,
 with a memory estimate of 212.37 GiB, over 4961620 allocations.
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 71.042 s (13.49% GC) to evaluate,
 with a memory estimate of 212.37 GiB, over 4961652 allocations.

-- multithreaded
nt = 4

n = 100000 -- stress test of larger lattice running averages
before changes this took about 55-65 mins
BenchmarkTools.Trial: 1 sample with 1 evaluation per sample.
 Single result which took 983.397 s (11.86% GC) to evaluate,
 with a memory estimate of 1050.63 GiB, over 10313381 allocations.
